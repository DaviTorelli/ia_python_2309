# -*- coding: utf-8 -*-
"""censo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aBdD8WLnk_3ZNC2OIoNarC4DdIud_WSJ

#Atualização e Importação de bibliotecas
"""

!pip -q install plotly --upgrade #atualizando a biblioteca plotly

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

"""#Importação do Dataset"""

base_census = pd.read_csv('/content/census.csv')

"""#Exploração de Dados"""

base_census

#Variável Discreta: É tipo numérica, mas que não tem muitos (ou nenhum) números decimais. Exemplos: age, education-num, hour-per-week.
#Variável Contínua: É tipo numérica, que contém bastantes números decimais. Exemplos: Final-Weight, Capital-Gain, Capital-Loss
#Variável Categórica Nominal: Não demanda hierarquia para as categorias, são separadas por nome, mas nenhuma é superior à outra. Exemplo: Workclass, marital-status, relationship, race, sexo, native-country
#Variável Categórica Ordinal: Demanda uma ordem, sendo uma categoria superior ou dependente da outra. Exemplo: Education

base_census.describe() #descreve todos os valores numéricos da base de dados
base_census.isnull().sum() #verifica se existe algum valor nulo na base de dados

np.unique(base_census['income'], return_counts= True)

sns.countplot(x = base_census['income']);

plt.hist(x = base_census['hour-per-week']);

grafico = px.treemap(base_census, path=['occupation','relationship','age'])
grafico.show()

grafico = px.parallel_categories(base_census,
                                 dimensions=['occupation','relationship'])
grafico.show()

grafico = px.parallel_categories(base_census,
                                 dimensions=['education','income'])
grafico.show()

"""#Previsores e Classes"""

base_census.columns #gera todas as colunas da base de dados

X_census = base_census.iloc[:, 0:14].values

y_census = base_census.iloc[:,14].values

"""#Tratamento de atributos categóricos"""

from sklearn.preprocessing import LabelEncoder #importa a biblioteca LabelEncoder

label_encoder_teste = LabelEncoder()

X_census[:,1]

teste = label_encoder_teste.fit_transform(X_census[:,1]) #converte os rótulos que eram string para tipos numéricos, para variáveis discretas

#Criando um encoder para cada coluna que possui dados categóricos (não-numéricos) na base de dados
label_encoder_workclass = LabelEncoder()
label_encoder_education = LabelEncoder()
label_encoder_marital = LabelEncoder()
label_encoder_occupation = LabelEncoder()
label_encoder_relationship = LabelEncoder()
label_encoder_race = LabelEncoder()
label_encoder_sex = LabelEncoder()
label_encoder_country = LabelEncoder()